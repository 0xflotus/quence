#!/usr/bin/env node

/* jslint node: true */
"use strict";

var opt = require('optimist');
var argv = opt
  .string('o')
  .describe('o', 'output type [pdf, svg]')
  .default('o', 'pdf')
  .boolean('v')
  .describe('v', 'verbose logging')
  .boolean('h')
  .describe('h', 'Show help')
  .argv;

if (argv.h) {
  opt.showHelp();
  process.exit(64);
}

var log = require('log4js').getLogger();
var fs = require('fs');
var path = require('path');

var draw = require('../lib/ladder-draw');
var ladder = require('../lib/ladder');

if (argv.d) {
    require('../lib/debug').enable();
}

log.setLevel(argv.v ? 'ALL' : 'WARN');

function newExt(name, ext) {
  // check extension now, so we don't create an empty file
  if (!draw.supported(ext)) {
    log.fatal('Unknown output type:', ext);
    process.exit(1);
  }

  return path.dirname(name) +
    path.sep +
    path.basename(name, path.extname(name)) +
    "." + ext;
}

function readFile(name) {
  fs.readFile(name, {encoding: 'utf8'}, function(er, data) {
    if (er) {
      log.error(name, er);
      return;
    }

    try {
      var outf = newExt(name, argv.o);
      var out  = draw.draw(data, argv.o);
      fs.writeFile(outf, out, function(er) {
        if (er) { log.error(name, er); }
      });
    } catch (e) {
      if (e instanceof ladder.SyntaxError) {
        log.error(name + "(" + e.line + ":" + e.column + "): " + e.message);
        return;
      } else {
        log.fatal(e);
        process.exit(1);
      }
    }
  });
}

for (var i=0; i<argv._.length; i++) {
  readFile(argv._[i]);
}
