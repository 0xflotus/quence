#!/usr/bin/env node

/* jslint node: true */
"use strict";

var opt = require('optimist');
var argv = opt
  .string('o')
  .describe('o', 'output type [png, svg]')
  .default('o', 'svg')
  .boolean('v')
  .describe('v', 'verbose logging')
  .boolean('h')
  .describe('h', 'Show help')
  .argv;

if (argv.h) {
  opt.showHelp();
  process.exit(64);
}

var log = require('log4js').getLogger();
var LadderDiagram = require( '../lib/ladder-diagram' );
var ladder = require( '../lib/ladder');
var fs = require('fs');
var path = require('path');
var canvg = require('canvg');
var Canvas = require('canvas');

if (argv.d) {
    require('../lib/debug').enable();
}

log.setLevel(argv.v ? 'ALL' : 'WARN');

function newExt(name, ext) {
  // check extension now, so we don't create an empty file
  switch (ext) {
    case 'svg':
    case 'png':
    case 'js':
    case 'json':
      break;
    case 'jpg':
    case 'jpeg':
      log.warn('Output type not working yet:', ext);
      break;
    default:
      log.fatal('Unknown output type:', ext);
      process.exit(1);
  }
  return path.dirname(name) +
    path.sep +
    path.basename(name, path.extname(name)) +
    "." + ext;
}

function readFile(name) {
  fs.readFile(name, {encoding: 'utf8'}, function(er, data) {
    if (er) {
      log.error(name, er);
      return;
    }

    var parsed;
    try {
      parsed = ladder.parse(data);
    } catch (e) {
      if (e instanceof ladder.SyntaxError) {
        log.error(name + "(" + e.line + ":" + e.column + "): " + e.message);
        return;
      }
    }
    var outf = newExt(name, argv.o);
    LadderDiagram.compute_ladder(parsed);
    var output = LadderDiagram.draw_ladder();

    if ((argv.o === 'js') || (argv.o === 'json')) {
      fs.writeFile(outf, JSON.stringify(parsed, null, 2), function(er) {
        if (er) {
          log.error(name, er);
          return;
        }
      });
      return;
    }
    else if (argv.o === 'svg') {
      fs.writeFile(outf, output, function (er) {
        if (er) {
          log.error(name, er);
          return;
        }
      });
    } else {
      var canvas = new Canvas();
      canvg(canvas, output, {ignoreAnimation: true});
      var outs = fs.createWriteStream(outf);
      switch (argv.o) {
        case 'png': canvas.pngStream().pipe(outs); break;
        case 'jpg':
        case 'jpeg': canvas.jpegStream().pipe(outs); break;
      }
    }
  });
}

for (var i=0; i<argv._.length; i++) {
  readFile(argv._[i]);
}

