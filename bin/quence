#!/usr/bin/env node

/* jslint node: true */
"use strict";

var opt = require('optimist');
var argv = opt
  .usage("Usage: $0 [-o type] [-v] [-h] FILE...")
  .string('o')
  .describe('o', 'output type [pdf, svg, json]')
  .default('o', 'pdf')
  .boolean('v')
  .describe('v', 'verbose logging')
  .boolean('h')
  .describe('h', 'Show help')
  .argv;

if (argv.h) {
  opt.showHelp();
  process.exit(64);
}

var log = require('log4js').getLogger();
var fs = require('fs');
var path = require('path');

var draw = require('../lib/quence');
var grammar = require('../lib/grammar');

if (argv.d) {
    require('../lib/debug').enable();
}

log.setLevel(argv.v ? 'ALL' : 'WARN');

function newExt(name, ext) {
  // check extension now, so we don't create an empty file
  if (!draw.supported(ext)) {
    log.fatal('Unknown output type:', ext);
    process.exit(1);
  }

  return path.dirname(name) +
    path.sep +
    path.basename(name, path.extname(name)) +
    "." + ext;
}

function readFile(name) {
  fs.readFile(name, {encoding: 'utf8'}, function(er, data) {
    if (er) {
      log.error(name, er);
      return;
    }

    var outf = newExt(name, argv.o);
    var out = fs.createWriteStream(outf);
    // TODO: Switch to promises
    draw.draw(data, argv, out, function(er) {
      if (er) {
        fs.unlinkSync(outf);
        if (er instanceof grammar.SyntaxError) {
          log.error(name + "(" + er.location.start.line + ":" + er.location.start.column + "): " + er.message);
          return;
        } else {
          log.fatal(er);
          process.exit(1);
        }
      }
      else {
        log.debug("finished");
      }
    });
  });
}

for (var i=0; i<argv._.length; i++) {
  readFile(argv._[i]);
}
